---
title: "Zillow"
authors: "Aram, Emily, Jun, Ryan"
date: "2023-03-24"
---

Link to GitHub Repo:
<https://github.com/Aram-1999/PIC16B_Group_Project>

Link to the Model's Notebook:
<https://colab.research.google.com/drive/10SH5oPbmAXK8ar6tU2xDbnok0Qi80svr#scrollTo=fOTFpK9GHvVx>

## Overview

## Technical Components

### Machine Learning Model

Because the user is inputting mostly numerical values (e.g. the number of bedrooms) and the goal is to accurately model the price value of that specific home, our group decided to utilize a regression model. To do this, we first needed to clean/impute the missing values in our dataset by using the mean of each column. After data preprocessing, we proceeded with splitting our data into predictor variables and target variables, then split each of these into training, validation, and testing data respectively.
---

For determining actual model itself, we used a nice tool called `lazypredict` in order to run through many regression models under `scikit-learn` and evaluate their accuracies. (Read more about its description here: <https://pypi.org/project/lazypredict/>). This way, we were able to increase efficiency and produce an organized table with the R-squared value and RMSE (Root-mean-square-error) of each model.

The following code demonstrates how `lazypredict` was implemented:

```python
pip install lazypredict # first install the library

import lazypredict
from lazypredict.Supervised import LazyRegressor # this will import all regressors found
from sklearn.utils import all_estimators
from sklearn.base import RegressorMixin
chosen_regressors = [
    'SVR',
    'BaggingRegressor',
    'RandomForestRegressor',
    'GradientBoostingRegressor',
    'LinearRegression',
    'RidgeCV',
    'LassoCV',
    'KNeighborsRegressor'
]

REGRESSORS = [
    est
    for est in all_estimators()
    if (issubclass(est[1], RegressorMixin) and (est[0] in chosen_regressors))
]

reg = LazyRegressor(verbose=0, ignore_warnings=False, custom_metric=None, 
                    regressors=REGRESSORS)
models, predictions = reg.fit(X_train, X_test, y_train, y_test)
print(models)
```

> As seen in the above code, it is important to note that we did not run through all 42 regression models available through `lazypredict`. There are mainly two reasons: the first was that some regressors did not match with our input dimensions and the second was that some regressors just took too long to execute and we were not able to produce accurate results in the end. Thus, we picked out 8 that made the most sense in terms of our data.

After running through 8 selected regressors, we ordered them based on their adjusted R-squared (coefficient of determination) and RSME values that indicate how well the model is fitting our data. The top result (the one with the highest R-squared value and the lowest RSME value) was the `BaggingRegressor`; therefore, we defined `model1` as follows:

```python

model1 = BaggingRegressor(max_features=1.0, 
                          n_estimators=10, 
                          bootstrap=True, 
                          random_state=25)
model1.fit(X_train, y_train)
```
---

Now, to implement this model into our dynamic website, we used the `pickle` module to save and transfer over the model. The following code demonstrates the process:

```python
import pickle

with open('Model/model1.pkl', 'rb') as f:
            model = pickle.load(f)

price = model.predict(pd.DataFrame({
    'address/zipcode': [zipcode],
    'bathrooms': [bed],
    'bedrooms': [bath]
})) 
```
---

To see how this model actually functions on the webpage, the following image shows how the model is implemented and what the user can expect after inputting certain information about a house: 

![](model_visual.jpg)

We picked Los Angeles as our target city, and the user is able input data points (number of bedrooms, bathrooms, square feet, year made, home type, and zipcode) through the data collection page. In this particular case, the values 2, 2, 1100, 2015, condo, and 90024 were entered, respectively, and our model was able to predict a price of $1,352,491. Users can play around with the input values to see various predictions. 


### Dynamic Website

We built a dynamic website using Flask that allows users to see housing data visualizations for the ten largest cities in the U.S. and get price predictions for their own home. On the home page is a map of the U.S. where the user can click on their desired city. This takes them to a page with geographic visualization of the housing data using plotly. The user can also customize the visualization by applying filters and submitting the form on the bottom of the page.

![](LA_visual.jpg)

In the Data Collection & Prediction page, the user can enter the data for their own home to receive a price prediction generated by a machine learning model. Then, in the Data Visualization page, we used plotly to create graphs to visualize the data distribution for the current city. The user can also see where their own data lies alongside other homes in the same city. In the View Data page, The user can also view the raw data we collected.

The following is a function that renders the template for data collection that supports `GET` and `POST` methods. This is also where we use the model to make price predictions.

```{python}
def data_collection():

    if request.method == 'GET':
        city = request.args.get('city')
        return render_template('data_collection.html', city=city,
                               prediction = False)
    else:
        city = request.args.get('city')
        bed=request.form["bed"]
        session['bed_info'] = bed
        bath=request.form["bath"]
        session['bath_info'] = bath
        sqft=request.form["sqft"]
        session['sqft_info'] = sqft
        year_made=request.form["year_made"]
        home_type = request.form['home_type']
        zipcode = str(request.form["zipcode"])
        
        with open('Model/model1.pkl', 'rb') as f:
            model = pickle.load(f)
        
        price = model.predict(pd.DataFrame({
            'address/zipcode': [zipcode],
            'bathrooms': [bed],
            'bedrooms': [bath]
        }))

        return render_template('data_collection.html', city = city,
                               prediction = True,
                               price = int(price[0]),
                               bed=bed, bath=bath, sqft=sqft,
                               year_made=year_made,
                               home_type=home_type,
                               zipcode=zipcode)

```


### Complex Data Visualizations
The website contains two pages for data visualization - one for geographic representation and another for histogram and scatter plot visualizations. The geographic visualization page contains two graphs utilizing Plotly’s  Mapbox platform. The user can navigate to this page by clicking on one of the cities on the home page. This would display the default graphs for the entire data of that city. The first visualization is similar to Zillow’s visualization graph. It provides some valuable insights into the data that has been used to train the model. The user can hover over data points and check out the number of bedrooms, bathrooms, sqft, and home type. The second graph utilizes Plotly’s density Mapbox platform. It shows how dense the data points are in the given region. Here is an example of how the graphs look like for the city of New York. \
---
![New York geographic graph1](New_York_graph1.png)
![New York geographic graph2](New_York_graph2.png)

The geographic visualization page also contains filters that can be used by the user to generate custom geographic visualizations. The user can choose to display only the properties with certain number of bedrooms or bathrooms, adjust the range for price, sqft, or year made, select the home type and the style of the map.
---
Here is the function that has been used for making the first geographic graph (It is located in the myGraph.py module). The function that had been used for making the second graph is almost exactly the same. The only difference lies in the choice of Plotly's platform, between Mapbox and Density Mapbox.
```{python}
def mapbox(name, **kwargs):
    """
    Creates a mapbox of all the data points scraped for the name (city name) parameter
    
    Args: name -- a city to be used for the geographic visualization,str
          **kwargs -- other parameters to filter the data to update the visualization
          
    Returns: A json with the mapbox figure
    """

    df = pd.read_csv(f"Datasets/{name}.csv") #Reads the data 
    center = {'lat': np.mean(df['latitude']), 'lon': np.mean(df['longitude'][0])} #Finds the center of the map

    for key, value in kwargs.items():
        if(key == "feature"):
            feature = value
        if(key == "number"):
            num = value
            if num != '':
                num = int(num)
                df = df[df[feature] == num] #Filters the data for specific features having a set value. Ex Bathrooms = 2 or Bedrooms = 3
        if(key == "feature_type"):
            feature_type = value
            if feature_type != []:
                df = df[df["homeType"].isin(feature_type)] #Filters the data to only include specific home types
        if(key == "feature_min_max"):
            feature_min_max = value
        if(key == "min"):
            minimum = value
            if minimum != '':
                minimum = int(minimum)
                df = df[df[feature_min_max] >= minimum] #Filters the data for specific features having a set minimum value. Ex Min Price = 100k or Min Sqft = 2000
        if(key == "max"):
            maximum = value
            print(maximum, feature_min_max)
            if maximum != '':
                maximum = int(maximum)
                df = df[df[feature_min_max] <= maximum]  #Filters the data for specific features having a set max value. Ex Max Price = 250k or Max Year Built = 2010
    #Creates plotly scatter mapbox using data with/without added filters
    fig = px.scatter_mapbox(df,
                            center = center, 
                            hover_data = ["address/city","price", 'bathrooms', 'bedrooms',
                                          'homeType'],
                            lat = "latitude",
                            lon = "longitude", 
                            zoom = 8,
                            height = 600,
                            mapbox_style=kwargs.pop("style", "open-street-map"))
    fig.update_layout(margin={"r":30,"t":10,"l":30,"b":0}) #sets the margin
    
    return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder) #returns the json
```
The function reads the data for the city (uses the name parameter as the name of the city). It find the center of the plot which is neccessary for displaying the city on the map even if no data points are left after filtering the data. This function accepts a set of key word arguments which act as filters mentioned above. These filters are applied next and a plot is created. After all this is done, the function creates a json file which will be used by the jinja template to render the graph.



## Conclusion

We hope for this website to be useful for people looking to sell their house or exploring various housing options in the ten largest cities in the U.S. With our multiple visualizations and a predictive regression model ingrained on our website, the user is able to get a comprehensive experience of not only seeing what the market is around them, but how the market looks all across the country. However, we must also consider the possible ethical ramifications of this project. Having all the data accessible in easy to understand visualizations could make it easy for companies or the wealthy to buy up cheap housing. This could end up displacing the current inabitants and lead to gentrification. Furthermore, as our model is certainly not 100% accurate, homeowners/buyers might end up with slightly incorrect estimations, leading to unreasonable expectations when selling or purchasing a home.

